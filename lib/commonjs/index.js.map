{"version":3,"sources":["index.tsx"],"names":["util","require","Native","NativeModules","RnLnd","RnLndImplementation","jsonOrBoolean","str","JSON","parse","_","channelBalance","connectPeer","host","pubkeyHex","fundingStateStepVerify","chanIdHex","psbtHex","fundingStateStepFinalize","genSeed","getInfo","initWallet","password","mnemonics","_inited","Error","listChannels","listPeers","pendingChannels","openChannelPsbt","amountSats","privateChannel","start","lndArguments","_started","defaultArguments","stop","stopDaemon","wipeLndDir","unlockWallet","walletBalance","sendPaymentSync","paymentRequest","amtSat","sendToRouteV2","paymentHashHex","paymentAddrHex","routesJsonString","decodePayReq","addInvoice","sat","memo","expiry","closeChannel","deliveryAddress","fundingTxidHex","outputIndex","force","listPayments","listInvoices","getTransactions","queryRoutes","sourceHex","destHex","sendAllCoins","address","getLndDir","getLogs","waitTillReady","timeout","c","connected","peers","length","_ready","Promise","resolve","setTimeout","console","warn","isReady","startUnlockAndWait","unlocked","isObject","o","Object","Array","isArray","camelToSnakeCase","replace","letter","toLowerCase","camelCase2SnakeCase","n","keys","forEach","k","map","i","payInvoiceViaSendToRoute","bolt11","freeAmount","decoded","numSatoshis","parseInt","Math","round","numMsat","info","from","identityPubkey","to","destination","hash","paymentHash","paymentAddr","base64ToHex","json","routes","url","response","fetch","rez","stringify"],"mappings":";;;;;;;AAAA;;;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMC,MAAM,GAAGC,2BAAcC,KAA7B;;AAEA,MAAMC,mBAAN,CAA0B;AAAA;AAAA,sCAKI,KALJ;;AAAA,qCAYG,KAZH;;AAAA,oCAmBE,KAnBF;AAAA;;AAqBxB,SAAOC,aAAP,CAAqBC,GAArB,EAA4C;AAC1C,QAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAA5B,EAAmC,OAAOA,GAAP;;AAEnC,QAAI;AACF,aAAOC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF;;AAED,QAAMC,cAAN,GAAkD;AAChD,WAAON,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACS,cAAP,EAAxC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACC,IAAD,EAAeC,SAAf,EAAoD;AAC7D,WAAOZ,MAAM,CAACU,WAAP,CAAmBC,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AAED,QAAMC,sBAAN,CAA6BC,SAA7B,EAAgDC,OAAhD,EAA4F;AAC1F,WAAOZ,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACa,sBAAP,CAA8BC,SAA9B,EAAyCC,OAAzC,CAAxC,CAAP;AACD;;AAED,QAAMC,wBAAN,CAA+BF,SAA/B,EAAkDC,OAAlD,EAA8F;AAC5F,WAAOZ,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACgB,wBAAP,CAAgCF,SAAhC,EAA2CC,OAA3C,CAAxC,CAAP;AACD;;AAEDE,EAAAA,OAAO,GAA8B;AACnC,WAAOjB,MAAM,CAACiB,OAAP,EAAP;AACD;;AAED,QAAMC,OAAN,GAA2C;AACzC,WAAOf,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACkB,OAAP,EAAxC,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,QAAgB,GAAG,YAApB,EAAkCC,SAAlC,EAAuE;AAC/E,QAAI,KAAKC,OAAT,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,SAAKD,OAAL,GAAe,IAAf;AACA,WAAOtB,MAAM,CAACmB,UAAP,CAAkBC,QAAlB,EAA4BC,SAA5B,CAAP;AACD;;AAED,QAAMG,YAAN,GAAgD;AAC9C,WAAOrB,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACwB,YAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,SAAN,GAA6C;AAC3C,WAAOtB,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACyB,SAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,eAAN,GAAmD;AACjD,WAAOvB,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC0B,eAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,eAAN,CAAsBf,SAAtB,EAAyCgB,UAAzC,EAA6DC,cAA7D,EAAiH;AAC/G,WAAO1B,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC2B,eAAP,CAAuBf,SAAvB,EAAkCgB,UAAlC,EAA8CC,cAA9C,CAAxC,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,YAAD,EAAyC;AAC5C,QAAI,KAAKC,QAAT,EAAmB;AACjB,YAAM,IAAIT,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,SAAKS,QAAL,GAAgB,IAAhB;AACA,UAAMC,gBAAgB,GACpB,qEAAqE;AACrE,+DADA,GAC8D;AAC9D,gGAFA,GAGA,sEAHA,GAIA,yCAJA,GAI4C;AAC5C,wGALA,GAMA,wGANA,GAOA,2GAPA,GAQA,mDATF;AAWA,WAAOjC,MAAM,CAAC8B,KAAP,CAAaC,YAAY,IAAIE,gBAA7B,CAAP;AACD;;AAEDC,EAAAA,IAAI,GAAqB;AACvB,WAAOlC,MAAM,CAACmC,UAAP,EAAP;AACD;;AAEDC,EAAAA,UAAU,GAAqB;AAC7B,WAAOpC,MAAM,CAACoC,UAAP,EAAP;AACD;;AAED,QAAMC,YAAN,CAAmBjB,QAAgB,GAAG,YAAtC,EAAsE;AACpE,QAAI,KAAKE,OAAT,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,SAAKD,OAAL,GAAe,IAAf,CAJoE,CAI/C;;AACrB,SAAKA,OAAL,GAAe,MAAMtB,MAAM,CAACqC,YAAP,CAAoBjB,QAApB,CAArB;AACA,WAAO,KAAKE,OAAZ;AACD;;AAED,QAAMgB,aAAN,GAAiD;AAC/C,WAAOnC,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACsC,aAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,eAAN,CAAsBC,cAAtB,EAA8CC,MAA9C,EAAyF;AACvF,WAAOtC,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACuC,eAAP,CAAuBC,cAAvB,EAAuCC,MAAvC,CAAxC,CAAP;AACD;;AAED,QAAMC,aAAN,CAAoBC,cAApB,EAA4CC,cAA5C,EAAoEC,gBAApE,EAAyH;AACvH,WAAO1C,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC0C,aAAP,CAAqBC,cAArB,EAAqCC,cAArC,EAAqDC,gBAArD,CAAxC,CAAP;AACD;;AAED,QAAMC,YAAN,CAAmBN,cAAnB,EAAsE;AACpE,WAAOrC,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC8C,YAAP,CAAoBN,cAApB,CAAxC,CAAP;AACD;;AAED,QAAMO,UAAN,CAAiBC,GAAjB,EAA8BC,IAA9B,EAA4CC,MAA5C,EAAuF;AACrF,WAAO/C,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC+C,UAAP,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,MAA7B,CAAxC,CAAP;AACD;;AAED,QAAMC,YAAN,CAAmBC,eAAnB,EAA4CC,cAA5C,EAAoEC,WAApE,EAAyFC,KAAzF,EAAoI;AAClI,WAAOpD,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACmD,YAAP,CAAoBC,eAApB,EAAqCC,cAArC,EAAqDC,WAArD,EAAkEC,KAAlE,CAAxC,CAAP;AACD;;AAED,QAAMC,YAAN,GAAgD;AAC9C,WAAOrD,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACwD,YAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,YAAN,GAAgD;AAC9C,WAAOtD,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAACyD,YAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,eAAN,GAAmD;AACjD,WAAOvD,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC0D,eAAP,EAAxC,CAAP;AACD;;AAED,QAAMC,WAAN,CAAkBC,SAAlB,EAAqCC,OAArC,EAAsDpB,MAAtD,EAAiG;AAC/F,WAAOtC,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC2D,WAAP,CAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCpB,MAAvC,CAAxC,CAAP;AACD;;AAED,QAAMqB,YAAN,CAAmBC,OAAnB,EAAoC;AAClC,WAAO5D,mBAAmB,CAACC,aAApB,CAAkC,MAAMJ,MAAM,CAAC8D,YAAP,CAAoBC,OAApB,CAAxC,CAAP;AACD;;AAED,QAAMC,SAAN,GAA6C;AAC3C,WAAO,MAAMhE,MAAM,CAACgE,SAAP,EAAb;AACD;;AAED,QAAMC,OAAN,GAA2C;AACzC,WAAO,MAAMjE,MAAM,CAACiE,OAAP,EAAb;AACD;;AAED,QAAMC,aAAN,CAAoBC,OAAO,GAAG,EAA9B,EAAkC;AAChC,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAO,CAAP,EAAU;AACR,YAAMC,SAAS,GAAG,MAAM,KAAK3D,WAAL,CAAiB,qBAAjB,EAAwC,oEAAxC,CAAxB;AACA,UAAI2D,SAAJ,EAAe;AACf,YAAMC,KAAU,GAAG,MAAM,KAAK7C,SAAL,EAAzB;;AACA,UAAI6C,KAAK,IAAIA,KAAK,CAACA,KAAf,IAAwBA,KAAK,CAACA,KAAN,CAAYC,MAAxC,EAAgD;AAC9C,aAAKC,MAAL,GAAc,IAAd;AACA;AACD,OAHD,MAGO;AACL,cAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAN;AACD;;AAED,UAAIN,CAAC,MAAMD,OAAX,EAAoB,MAAM,IAAI5C,KAAJ,CAAU,2BAAV,CAAN;AACrB;;AACDqD,IAAAA,OAAO,CAACC,IAAR,CAAa,OAAb;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKN,MAAZ;AACD;;AAED,QAAMO,kBAAN,CAAyB3D,QAAgB,GAAG,YAA5C,EAA0D;AACxDwD,IAAAA,OAAO,CAACC,IAAR,CAAa,aAAb;AACA,UAAM,KAAK/C,KAAL,CAAW,EAAX,CAAN;AACA8C,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACA,UAAMG,QAAQ,GAAG,MAAM,KAAK3C,YAAL,CAAkBjB,QAAlB,CAAvB;;AACA,QAAI,CAAC4D,QAAL,EAAe;AACb,YAAM,IAAIzD,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACDqD,IAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACA,UAAM,KAAKX,aAAL,EAAN;AACD;;AAEOe,EAAAA,QAAR,CAAiBC,CAAjB,EAAyB;AACvB,WAAOA,CAAC,KAAKC,MAAM,CAACD,CAAD,CAAZ,IAAmB,CAACE,KAAK,CAACC,OAAN,CAAcH,CAAd,CAApB,IAAwC,OAAOA,CAAP,KAAa,UAA5D;AACD;;AAEOI,EAAAA,gBAAR,CAAyBjF,GAAzB,EAA8C;AAC5C,WAAOA,GAAG,CAACkF,OAAJ,CAAY,QAAZ,EAAuBC,MAAD,eAAgBA,MAAM,CAACC,WAAP,EAAhB,CAAtB,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAACR,CAAD,EAAc;AAC/B,QAAI,KAAKD,QAAL,CAAcC,CAAd,CAAJ,EAAsB;AACpB,YAAMS,CAAC,GAAG,EAAV;AAEAR,MAAAA,MAAM,CAACS,IAAP,CAAYV,CAAZ,EAAeW,OAAf,CAAwBC,CAAD,IAAO;AAC3BH,QAAAA,CAAD,CAAW,KAAKL,gBAAL,CAAsBQ,CAAtB,CAAX,IAAuC,KAAKJ,mBAAL,CAAyBR,CAAC,CAACY,CAAD,CAA1B,CAAvC;AACD,OAFD;AAIA,aAAOH,CAAP;AACD,KARD,MAQO,IAAIP,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;AAC3B,aAAOA,CAAC,CAACa,GAAF,CAAOC,CAAD,IAAO;AAClB,eAAO,KAAKN,mBAAL,CAAyBM,CAAzB,CAAP;AACD,OAFM,CAAP;AAGD;;AAED,WAAOd,CAAP;AACD;;AAED,QAAMe,wBAAN,CAA+BC,MAA/B,EAA+CC,UAAU,GAAG,KAA5D,EAAmE;AACjE,QAAI1D,MAAM,GAAG,CAAb;AACA,UAAM2D,OAAY,GAAG,MAAM,KAAKtD,YAAL,CAAkBoD,MAAlB,CAA3B;;AAEA,QAAIC,UAAJ,EAAgB;AACd1D,MAAAA,MAAM,GAAG,CAAC0D,UAAV;AACD,KAFD,MAEO;AACL1D,MAAAA,MAAM,GAAG2D,OAAO,CAACC,WAAR,GAAsBC,QAAQ,CAACF,OAAO,CAACC,WAAT,EAAsB,EAAtB,CAA9B,GAA0DE,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,OAAR,GAAkB,IAA7B,CAAnE;AACD;;AAED,UAAMC,IAAS,GAAG,MAAM,KAAKxF,OAAL,EAAxB;AACA,UAAMyF,IAAI,GAAGD,IAAI,CAACE,cAAlB;AACA,UAAMC,EAAE,GAAGT,OAAO,CAACU,WAAnB;AACA,UAAMC,IAAI,GAAGX,OAAO,CAACY,WAArB;AAEA,UAAMpE,cAAc,GAAGwD,OAAO,CAACa,WAAR,GAAsBnH,IAAI,CAACoH,WAAL,CAAiBd,OAAO,CAACa,WAAzB,CAAtB,GAA8D,EAArF;AAEA,QAAIE,IAAJ,CAjBiE,CAmBjE;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM,KAAKzD,WAAL,CAAiBgD,IAAjB,EAAuBE,EAAvB,EAA2BpE,MAA3B,CAArB;AACA0E,MAAAA,IAAI,GAAG,KAAKzB,mBAAL,CAAyB0B,MAAzB,CAAP;AACD,KAHD,CAGE,OAAO5G,CAAP,EAAU,CAAE;;AAEd,QAAI,CAAC2G,IAAL,EAAW;AACT;AACA,UAAIE,GAAG,GAAG,EAAV;;AACA,UAAI;AACF,YAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAEF,GAAG,6DAAsDV,IAAtD,cAA8DE,EAA9D,cAAoEpE,MAApE,CAAL,CAA1B;AACAmC,QAAAA,OAAO,CAACC,IAAR,CAAawC,GAAb;AACAF,QAAAA,IAAI,GAAG,MAAMG,QAAQ,CAACH,IAAT,EAAb;AACD,OAJD,CAIE,OAAO3G,CAAP,EAAU;AACV,cAAM,IAAIe,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF;;AAED,UAAMiG,GAAG,GAAG,MAAM,KAAK9E,aAAL,CAAmBqE,IAAnB,EAAyBnE,cAAzB,EAAyCtC,IAAI,CAACmH,SAAL,CAAeN,IAAf,CAAzC,CAAlB;AACAvC,IAAAA,OAAO,CAACC,IAAR,CAAa2C,GAAb;AACA,WAAOA,GAAP;AACD;;AA/QuB;;eAkRX,IAAIrH,mBAAJ,E","sourcesContent":["import { NativeModules } from 'react-native';\nconst util = require('./util');\n\nconst Native = NativeModules.RnLnd;\n\nclass RnLndImplementation {\n  /**\n   * Flag that prevents calling LND start twice, as it leads to app crash\n   * @private\n   */\n  private _started: boolean = false;\n\n  /**\n   * Flag that shows whether we already Inited or Unlocked LND. It wont crash\n   * if called again, but rather idicates theres a bug in logic on upper level\n   * @private\n   */\n  private _inited: boolean = false;\n\n  /**\n   * Tells if LND can accept calls after it was unlocked and fully started\n   * (i.e. wont throw \"server is still in the process of starting\" on our calls)\n   * @private\n   */\n  private _ready: boolean = false;\n\n  static jsonOrBoolean(str: string | boolean) {\n    if (str === true || str === false) return str;\n\n    try {\n      return JSON.parse(str);\n    } catch (_) {\n      return false;\n    }\n  }\n\n  async channelBalance(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.channelBalance());\n  }\n\n  connectPeer(host: string, pubkeyHex: string): Promise<boolean> {\n    return Native.connectPeer(host, pubkeyHex);\n  }\n\n  async fundingStateStepVerify(chanIdHex: string, psbtHex: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.fundingStateStepVerify(chanIdHex, psbtHex));\n  }\n\n  async fundingStateStepFinalize(chanIdHex: string, psbtHex: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.fundingStateStepFinalize(chanIdHex, psbtHex));\n  }\n\n  genSeed(): Promise<boolean | string> {\n    return Native.genSeed();\n  }\n\n  async getInfo(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.getInfo());\n  }\n\n  initWallet(password: string = 'bluewallet', mnemonics: string): Promise<boolean> {\n    if (this._inited) {\n      throw new Error('LND is already inited or unlocked');\n    }\n    this._inited = true;\n    return Native.initWallet(password, mnemonics);\n  }\n\n  async listChannels(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listChannels());\n  }\n\n  async listPeers(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listPeers());\n  }\n\n  async pendingChannels(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.pendingChannels());\n  }\n\n  async openChannelPsbt(pubkeyHex: string, amountSats: number, privateChannel: boolean): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.openChannelPsbt(pubkeyHex, amountSats, privateChannel));\n  }\n\n  start(lndArguments: string): Promise<boolean> {\n    if (this._started) {\n      throw new Error('LND is already started');\n    }\n    this._started = true;\n    const defaultArguments =\n      '--sync-freelist --tlsdisableautofill  --maxpendingchannels=1000 ' + // --debuglevel=debug\n      '--minchansize=1000000 --ignore-historical-gossip-filters ' + // --rejecthtlc\n      '--bitcoin.active --bitcoin.mainnet --bitcoin.defaultchanconfs=1 --routing.assumechanvalid ' +\n      '--protocol.wumbo-channels --rpclisten=127.0.0.1 --norest --nolisten ' +\n      '--maxbackoff=5s --connectiontimeout=20s' + // --enable-upfront-shutdown\n      '--bitcoin.node=neutrino --neutrino.addpeer=btcd-mainnet.lightning.computer --neutrino.maxpeers=10 ' +\n      '--neutrino.assertfilterheader=660000:08312375fabc082b17fa8ee88443feb350c19a34bb7483f94f7478fa4ad33032 ' +\n      '--neutrino.feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json  --numgraphsyncpeers=1 ' +\n      '--bitcoin.basefee=100000 --bitcoin.feerate=10000 ';\n\n    return Native.start(lndArguments || defaultArguments);\n  }\n\n  stop(): Promise<boolean> {\n    return Native.stopDaemon();\n  }\n\n  wipeLndDir(): Promise<boolean> {\n    return Native.wipeLndDir();\n  }\n\n  async unlockWallet(password: string = 'bluewallet'): Promise<boolean> {\n    if (this._inited) {\n      throw new Error('LND is already inited or unlocked');\n    }\n    this._inited = true; // locking first\n    this._inited = await Native.unlockWallet(password);\n    return this._inited;\n  }\n\n  async walletBalance(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.walletBalance());\n  }\n\n  async sendPaymentSync(paymentRequest: string, amtSat: number): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.sendPaymentSync(paymentRequest, amtSat));\n  }\n\n  async sendToRouteV2(paymentHashHex: string, paymentAddrHex: string, routesJsonString: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.sendToRouteV2(paymentHashHex, paymentAddrHex, routesJsonString));\n  }\n\n  async decodePayReq(paymentRequest: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.decodePayReq(paymentRequest));\n  }\n\n  async addInvoice(sat: number, memo: string, expiry: number): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.addInvoice(sat, memo, expiry));\n  }\n\n  async closeChannel(deliveryAddress: string, fundingTxidHex: string, outputIndex: number, force: boolean): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.closeChannel(deliveryAddress, fundingTxidHex, outputIndex, force));\n  }\n\n  async listPayments(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listPayments());\n  }\n\n  async listInvoices(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listInvoices());\n  }\n\n  async getTransactions(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.getTransactions());\n  }\n\n  async queryRoutes(sourceHex: string, destHex: string, amtSat: number): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.queryRoutes(sourceHex, destHex, amtSat));\n  }\n\n  async sendAllCoins(address: string) {\n    return RnLndImplementation.jsonOrBoolean(await Native.sendAllCoins(address));\n  }\n\n  async getLndDir(): Promise<boolean | string> {\n    return await Native.getLndDir();\n  }\n\n  async getLogs(): Promise<boolean | string> {\n    return await Native.getLogs();\n  }\n\n  async waitTillReady(timeout = 30) {\n    let c = 0;\n    while (1) {\n      const connected = await this.connectPeer('165.227.95.104:9735', '02e89ca9e8da72b33d896bae51d20e7e6675aa971f7557500b6591b15429e717f1');\n      if (connected) break;\n      const peers: any = await this.listPeers();\n      if (peers && peers.peers && peers.peers.length) {\n        this._ready = true;\n        break;\n      } else {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n\n      if (c++ >= timeout) throw new Error('waiting for LND timed out');\n    }\n    console.warn('ready');\n  }\n\n  /**\n   * Tells if LND can accept calls after it was unlocked and fully started\n   * (i.e. wont throw \"server is still in the process of starting\" on our calls)\n   */\n  isReady() {\n    return this._ready;\n  }\n\n  async startUnlockAndWait(password: string = 'bluewallet') {\n    console.warn('starting...');\n    await this.start('');\n    console.warn('started');\n    const unlocked = await this.unlockWallet(password);\n    if (!unlocked) {\n      throw new Error('Could not unlock LND. Is wallet created?');\n    }\n    console.warn('unlocked');\n    await this.waitTillReady();\n  }\n\n  private isObject(o: any) {\n    return o === Object(o) && !Array.isArray(o) && typeof o !== 'function';\n  }\n\n  private camelToSnakeCase(str: string): string {\n    return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n  }\n\n  camelCase2SnakeCase(o: any): any {\n    if (this.isObject(o)) {\n      const n = {};\n\n      Object.keys(o).forEach((k) => {\n        (n as any)[this.camelToSnakeCase(k)] = this.camelCase2SnakeCase(o[k]);\n      });\n\n      return n;\n    } else if (Array.isArray(o)) {\n      return o.map((i) => {\n        return this.camelCase2SnakeCase(i);\n      });\n    }\n\n    return o;\n  }\n\n  async payInvoiceViaSendToRoute(bolt11: string, freeAmount = false) {\n    let amtSat = 0;\n    const decoded: any = await this.decodePayReq(bolt11);\n\n    if (freeAmount) {\n      amtSat = +freeAmount;\n    } else {\n      amtSat = decoded.numSatoshis ? parseInt(decoded.numSatoshis, 10) : Math.round(decoded.numMsat / 1000);\n    }\n\n    const info: any = await this.getInfo();\n    const from = info.identityPubkey;\n    const to = decoded.destination;\n    const hash = decoded.paymentHash;\n\n    const paymentAddrHex = decoded.paymentAddr ? util.base64ToHex(decoded.paymentAddr) : '';\n\n    let json;\n\n    // lets try quering route internaly first:\n    try {\n      const routes = await this.queryRoutes(from, to, amtSat);\n      json = this.camelCase2SnakeCase(routes);\n    } catch (_) {}\n\n    if (!json) {\n      // fallback to external router:\n      let url = '';\n      try {\n        let response = await fetch((url = `http://lndhub-staging.herokuapp.com/queryroutes/${from}/${to}/${amtSat}`));\n        console.warn(url);\n        json = await response.json();\n      } catch (_) {\n        throw new Error('Could not find route');\n      }\n    }\n\n    const rez = await this.sendToRouteV2(hash, paymentAddrHex, JSON.stringify(json));\n    console.warn(rez);\n    return rez;\n  }\n}\n\nexport default new RnLndImplementation();\n"]}