{"version":3,"sources":["index.tsx"],"names":["NativeModules","util","require","Native","RnLnd","RnLndImplementation","jsonOrBoolean","str","JSON","parse","base64decode","_","channelBalance","connectPeer","host","pubkeyHex","fundingStateStepVerify","chanIdHex","psbtHex","fundingStateStepFinalize","genSeed","getInfo","initWallet","password","mnemonics","_inited","Error","listChannels","listPeers","pendingChannels","openChannelPsbt","amountSats","privateChannel","start","lndArguments","_started","defaultArguments","stop","stopDaemon","wipeLndDir","unlockWallet","walletBalance","sendPaymentSync","paymentRequest","sendToRouteV2","paymentHashHex","paymentAddrHex","routesJsonString","decodePayReq","addInvoice","sat","memo","expiry","closeChannel","deliveryAddress","fundingTxidHex","outputIndex","force","listPayments","listInvoices","getTransactions","getLndDir","getLogs","waitTillReady","timeout","c","connected","peers","length","_ready","Promise","resolve","setTimeout","console","warn","isReady","startUnlockAndWait","unlocked","payInvoiceViaSendToRoute","bolt11","decoded","info","amtSat","numSatoshis","parseInt","Math","round","numMsat","from","identityPubkey","to","destination","hash","paymentHash","paymentAddr","base64ToHex","url","response","fetch","json","rez","stringify"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nconst util = require('./util');\n\ntype NativeType = {\n  start(lndArguments: string): Promise<boolean>;\n  stopDaemon(): Promise<boolean>;\n  wipeLndDir(): Promise<boolean>;\n  unlockWallet(password: string): Promise<boolean>;\n  initWallet(password: string, mnemonics: string): Promise<boolean>;\n  getInfo(): Promise<boolean | string>;\n  getLndDir(): Promise<boolean | string>;\n  listChannels(): Promise<boolean | string>;\n  listPeers(): Promise<boolean | string>;\n  pendingChannels(): Promise<boolean | string>;\n  walletBalance(): Promise<boolean | string>;\n  channelBalance(): Promise<boolean | string>;\n  connectPeer(host: string, pubkeyHex: string): Promise<boolean>;\n  openChannelPsbt(pubkeyHex: string, amountSats: number, privateChannel: boolean): Promise<boolean | string>;\n  fundingStateStepVerify(chanIdHex: string, psbtHex: string): Promise<boolean | string>;\n  fundingStateStepFinalize(chanIdHex: string, psbtHex: string): Promise<boolean | string>;\n  genSeed(): Promise<boolean | string>;\n  sendPaymentSync(paymentRequest: string): Promise<boolean | string>;\n  sendToRouteV2(paymentHashHex: string, paymentAddrHex: string, routesJsonString: string): Promise<boolean | string>;\n  decodePayReq(paymentRequest: string): Promise<boolean | string>;\n  addInvoice(sat: number, memo: string, expiry: number): Promise<boolean | string>;\n  closeChannel(deliveryAddress: string, fundingTxidHex: string, outputIndex: number, force: boolean): Promise<boolean | string>;\n  listPayments(): Promise<boolean | string>;\n  listInvoices(): Promise<boolean | string>;\n  getTransactions(): Promise<boolean | string>;\n  getLogs(): Promise<boolean | string>;\n};\n\nconst Native: NativeType = NativeModules.RnLnd;\n\nclass RnLndImplementation {\n  /**\n   * Flag that prevents calling LND start twice, as it leads to app crash\n   * @private\n   */\n  private _started: boolean = false;\n\n  /**\n   * Flag that shows whether we already Inited or Unlocked LND. It wont crash\n   * if called again, but rather idicates theres a bug in logic on upper level\n   * @private\n   */\n  private _inited: boolean = false;\n\n  /**\n   * Tells if LND can accept calls after it was unlocked and fully started\n   * (i.e. wont throw \"server is still in the process of starting\" on our calls)\n   * @private\n   */\n  private _ready: boolean = false;\n\n  static jsonOrBoolean(str: string | boolean) {\n    if (str === true || str === false) return str;\n\n    try {\n      return JSON.parse(util.base64decode(str));\n    } catch (_) {\n      return false;\n    }\n  }\n\n  async channelBalance(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.channelBalance());\n  }\n\n  connectPeer(host: string, pubkeyHex: string): Promise<boolean> {\n    return Native.connectPeer(host, pubkeyHex);\n  }\n\n  async fundingStateStepVerify(chanIdHex: string, psbtHex: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.fundingStateStepVerify(chanIdHex, psbtHex));\n  }\n\n  async fundingStateStepFinalize(chanIdHex: string, psbtHex: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.fundingStateStepFinalize(chanIdHex, psbtHex));\n  }\n\n  genSeed(): Promise<boolean | string> {\n    return Native.genSeed();\n  }\n\n  async getInfo(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.getInfo());\n  }\n\n  initWallet(password: string = 'gsomgsomgsom', mnemonics: string): Promise<boolean> {\n    if (this._inited) {\n      throw new Error('LND is already inited or unlocked');\n    }\n    this._inited = true;\n    return Native.initWallet(password, mnemonics);\n  }\n\n  async listChannels(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listChannels());\n  }\n\n  async listPeers(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listPeers());\n  }\n\n  async pendingChannels(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.pendingChannels());\n  }\n\n  async openChannelPsbt(pubkeyHex: string, amountSats: number, privateChannel: boolean): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.openChannelPsbt(pubkeyHex, amountSats, privateChannel));\n  }\n\n  start(lndArguments: string): Promise<boolean> {\n    if (this._started) {\n      throw new Error('LND is already started');\n    }\n    this._started = true;\n    const defaultArguments =\n      '--sync-freelist --tlsdisableautofill  --maxpendingchannels=10 ' + // --debuglevel=debug\n      '--minchansize=1000000 --ignore-historical-gossip-filters ' + // --rejecthtlc\n      '--bitcoin.active --bitcoin.mainnet --bitcoin.defaultchanconfs=1 --routing.assumechanvalid ' +\n      '--protocol.wumbo-channels --rpclisten=127.0.0.1 --norest --nolisten ' +\n      '--maxbackoff=5s --enable-upfront-shutdown --connectiontimeout=20s' +\n      '--bitcoin.node=neutrino --neutrino.addpeer=btcd-mainnet.lightning.computer --neutrino.maxpeers=10 ' +\n      '--neutrino.assertfilterheader=660000:08312375fabc082b17fa8ee88443feb350c19a34bb7483f94f7478fa4ad33032 ' +\n      '--neutrino.feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json  --numgraphsyncpeers=1 ' +\n      '--bitcoin.basefee=100000 --bitcoin.feerate=10000 ';\n\n    return Native.start(lndArguments || defaultArguments);\n  }\n\n  stop(): Promise<boolean> {\n    return Native.stopDaemon();\n  }\n\n  wipeLndDir(): Promise<boolean> {\n    return Native.wipeLndDir();\n  }\n\n  async unlockWallet(password: string = 'gsomgsomgsom'): Promise<boolean> {\n    if (this._inited) {\n      throw new Error('LND is already inited or unlocked');\n    }\n    this._inited = true; // locking first\n    this._inited = await Native.unlockWallet(password);\n    return this._inited;\n  }\n\n  async walletBalance(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.walletBalance());\n  }\n\n  async sendPaymentSync(paymentRequest: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.sendPaymentSync(paymentRequest));\n  }\n\n  async sendToRouteV2(paymentHashHex: string, paymentAddrHex: string, routesJsonString: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.sendToRouteV2(paymentHashHex, paymentAddrHex, routesJsonString));\n  }\n\n  async decodePayReq(paymentRequest: string): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.decodePayReq(paymentRequest));\n  }\n\n  async addInvoice(sat: number, memo: string, expiry: number): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.addInvoice(sat, memo, expiry));\n  }\n\n  async closeChannel(deliveryAddress: string, fundingTxidHex: string, outputIndex: number, force: boolean): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.closeChannel(deliveryAddress, fundingTxidHex, outputIndex, force));\n  }\n\n  async listPayments(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listPayments());\n  }\n\n  async listInvoices(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.listInvoices());\n  }\n\n  async getTransactions(): Promise<boolean | object> {\n    return RnLndImplementation.jsonOrBoolean(await Native.getTransactions());\n  }\n\n  async getLndDir(): Promise<boolean | string> {\n    return await Native.getLndDir();\n  }\n\n  async getLogs(): Promise<boolean | string> {\n    return await Native.getLogs();\n  }\n\n  async waitTillReady(timeout = 30) {\n    let c = 0;\n    while (1) {\n      const connected = await this.connectPeer('165.227.95.104:9735', '02e89ca9e8da72b33d896bae51d20e7e6675aa971f7557500b6591b15429e717f1');\n      if (connected) break;\n      const peers: any = await this.listPeers();\n      if (peers && peers.peers && peers.peers.length) {\n        this._ready = true;\n        break;\n      } else {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n\n      if (c++ >= timeout) throw new Error('waiting for LND timed out');\n    }\n    console.warn('ready');\n  }\n\n  /**\n   * Tells if LND can accept calls after it was unlocked and fully started\n   * (i.e. wont throw \"server is still in the process of starting\" on our calls)\n   */\n  async isReady() {\n    return this._ready;\n  }\n\n  async startUnlockAndWait(password: string = 'gsomgsomgsom') {\n    console.warn('starting...');\n    await this.start('');\n    console.warn('started');\n    const unlocked = await this.unlockWallet(password);\n    if (!unlocked) {\n      throw new Error('Could not unlock LND. Is wallet created?');\n    }\n    console.warn('unlocked');\n    await this.waitTillReady();\n  }\n\n  async payInvoiceViaSendToRoute(bolt11: string) {\n    const decoded: any = await this.decodePayReq(bolt11);\n\n    const info: any = await this.getInfo();\n    const amtSat = decoded.numSatoshis ? parseInt(decoded.numSatoshis, 10) : Math.round(decoded.numMsat / 1000);\n    const from = info.identityPubkey;\n    const to = decoded.destination;\n    const hash = decoded.paymentHash;\n\n    const paymentAddrHex = decoded.paymentAddr ? util.base64ToHex(decoded.paymentAddr) : '';\n\n    let url = '';\n    let response = await fetch((url = `http://lndhub-staging.herokuapp.com/queryroutes/${from}/${to}/${amtSat}`));\n    console.warn(url);\n    let json = await response.json();\n\n    const rez = await this.sendToRouteV2(hash, paymentAddrHex, JSON.stringify(json));\n    console.warn(rez);\n    return rez;\n  }\n}\n\nexport default new RnLndImplementation();\n"]}